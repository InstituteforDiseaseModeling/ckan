#!/usr/bin/env python
# encoding: utf-8

import argparse
import socket
import sys
import yaml

from string import punctuation
from ckan.logic import ValidationError, NotAuthorized
from ckanapi import RemoteCKAN

# Before this script can run there has to be at least one sysadmin user whose API key is used for loading data.
#
# paster user add dlukacevic email=dlukacevic@idmod.org fullname="Dejan Lukacevic" -c /etc/ckan/production.ini
# paster sysadmin add dlukacevic -c /etc/ckan/production.ini


def main(args):
    """Populate IDM CKAN instance with initial data."""

    # Construct CKAN url and initiate API object.
    host_url = get_host_url(args.host)
    act = RemoteCKAN(host_url, apikey=args.api_key).action

    # Fail safe, only run if DB is empty or unless "force" flag is used.
    if not args.force:
        try:
            fail_safe_check(act, act.user_list, 'users', 2)
            fail_safe_check(act, act.organization_list, 'research groups')
            fail_safe_check(act, act.group_list, 'topics')

        except ValidationError as e:
            print e.error_dict['message']
            sys.exit(1)

        # Load data from a file and separate research groups and topics.
    items = load_yaml(args.file)
    rgroups = items['research_groups'] if items and items.get('research_groups') else []
    topics = items['topics'] if items and items.get('research_groups') else []

    # Create users, research groups and topics.
    create_research_groups_and_users(act, rgroups, host_url)
    create_topics(act, topics, host_url)


def fail_safe_check(act, func, label, max_count=0):
    message_end = 'Data bootstraping works only on an empty database or if "--force" flag is used.'
    cnt = len(func(all_fields=False))
    if cnt > max_count:
        raise ValidationError('Fail-safe: Found {} existing {}. {}'.format(cnt, label, message_end))


def get_host_url(host):
    host_name = host or '{}:5000'.format(socket.gethostname())
    host_url = 'http://{}'.format(host_name)

    return host_url


def load_yaml(file_path):
    with open(file_path, 'r') as stream:
        items = None
        try:
            items = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print exc.message

    return items


def create_research_groups_and_users(act, rgroups, host_url):
    """Iterate over research groups (RG), create each RG add listed member users."""
    for name, info in rgroups.items():
        members = []

        # Create the admin user
        if info and info.get('admin'):
            admin = create_single_user(act, info['admin'], members)

        # Create listed member users
        if info and info.get('members'):
            members_raw = [u.strip() for u in info['members'].split(';')]
            members_raw = list(set(members_raw))
            for member_raw in members_raw:
                create_single_user(act, member_raw, members)

        # Create the research group adding listed users as members.
        title = info['title'] if info and info.get('title') else name
        description = info['description'] if info and info.get('description') else ''
        api_create_research_group(act, name, title, description, admin, members, host_url)


def create_single_user(act, user_raw, all_members):
    """Create a user calling API and if successful return user name."""
    username, full_name, email = parse_user(user_raw)
    member = api_create_user(act, username, full_name, email, args.password)
    if member:
        assert member == username
        all_members.append(member)

    return username


def parse_user(outlook_paste):
    """Parse user info from the user string (generated by copy-pasting from Outlook)."""
    full_name, email_raw = outlook_paste.split(' <')
    email = email_raw.strip(punctuation)
    username = email.split('@')[0].lower()

    return username, full_name, email


def api_create_user(act, username, full_name, email, password):
    """Create a user by calling API via the common method."""
    args_dict = {'name': username, 'email': email, 'fullname': full_name, 'password': password}

    created_msg = 'User already exists: {}'.format(username)
    exists_msg = 'Created a new user {}'.format(username)
    error_msg = 'name is not available'

    new_user = _call_api(act.user_create, args_dict, created_msg, exists_msg, error_msg)

    name = new_user['name'] if new_user and new_user.get('name') else None

    return name


def api_create_research_group(act, name, title, description, admin, members, host_url):
    """Create a research group by calling API via the common method."""
    image_url = '{}/images/rgroup-{}.png'.format(host_url, name)

    # Research Group (organization) roles: member - see all datasets, editor - edit datasets, admin - manage info
    users = [{'name': username, 'capacity': 'editor'} for username in members if username != admin]
    users.append({'name': admin, 'capacity': 'admin'})

    args_dict = {'name': name, 'title': title, 'description': description, 'image_url': image_url, 'users': users}
    created_msg = 'Research Group already exists: {}'.format(title)
    exists_msg = 'Created a new research group {}'.format(title)
    error_msg = 'name already exists'

    _call_api(act.organization_create, args_dict, created_msg, exists_msg, error_msg)


def create_topics(act, topics, host_url):
    """Iterate over topics and create them."""
    for name, info in topics.items():
        title = info['title'] if info and info.get('title') else name
        description = info['description'] if info and info.get('description') else ''
        api_create_topic(act, name, title, description, host_url)


def api_create_topic(act, name, title, description, host_url):
    """Create a topic by calling API via the common method."""
    image_url = '{}/images/topic-{}.png'.format(host_url, name)

    # Topics (group) roles: admin - manage info, member - add data to the topic (all can see the groups and datasets)
    # TODO: Ensure all users can add datasets to topics. determine which users will be topic admins.
    args_dict = {'name': name, 'title': title, 'description': description, 'image_url': image_url}

    created_msg = 'Topic already exists: {}'.format(title)
    exists_msg = 'Created a new topic {}'.format(title)
    error_msg = 'name already exists'

    _call_api(act.group_create, args_dict, created_msg, exists_msg, error_msg)


def _call_api(func, args_dict, created_msg, exists_msg, err_msg):
    """The common API call method handling exceptions used to detect existing data."""
    ok = True
    ret = None
    if args and hasattr(args, 'dryrun') and not args.dryrun:
        try:
            ret = func(**args_dict)
        except ValidationError as e:
            if e.error_dict and e.error_dict.get('name') and err_msg in e.error_dict['name'][0]:
                print created_msg
                ok = False
            else:
                raise e
        except NotAuthorized as e:
            ok = False
            print "NotAuthorized: Make sure api key is valid and the user is a sysadmin."
            sys.exit(1)

    if ok:
        print exists_msg

    return ret

def parse_args():
    example = r"python bootstrap.py 2f83d65d-e5e9-4e22-9c52-baaf898c2022 -c ..\windows-local\development.ini"
    parser = argparse.ArgumentParser(example)
    parser.add_argument('api_key')
    parser.add_argument('-f', '--file', default='metadata.yaml')
    parser.add_argument('-p', '--password', default='Password123')
    parser.add_argument('-c', '--config', default='/etc/ckan/production.ini')
    parser.add_argument('--host', default=None)
    parser.add_argument('--dryrun', action='store_true')
    parser.add_argument('--force', action='store_true')
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    main(args)



# encoding: utf-8

import argparse
import os
import socket
import sys
import yaml

from string import punctuation
from ckan.logic import ValidationError, NotAuthorized
from ckanapi import RemoteCKAN

# Before this script can run there has to be at least one sysadmin user whose API key is used for loading data.
#
# paster user add dlukacevic email=dlukacevic@idmod.org fullname="Dejan Lukacevic" -c /etc/ckan/production.ini
# paster sysadmin add dlukacevic -c /etc/ckan/production.ini


def main(args):
    u"""
    Populate IDM CKAN instance with initial data. Supported scenarios:
    1. From a docker host (computer name used for both API and images url.)
    2. From within CKAN container (computer name for API URL and env. CKAN_SITE_URL for images)
    3. Against a remote CKAN server (CKAN URL must be given as an argument, to be used for both API and images url)
    """

    # Construct CKAN url and initiate API object.
    host_url = get_host_url(external_url_first=False)
    act = RemoteCKAN(host_url, apikey=args.api_key).action

    # Fail safe, only run if DB is empty or unless "force" flag is used.
    if not args.force:
        try:
            fail_safe_check(act, act.user_list, u'users', 2)
            fail_safe_check(act, act.organization_list, u'research groups')
            fail_safe_check(act, act.group_list, u'topics')

        except ValidationError as e:
            print e.error_dict[u'message']
            sys.exit(1)

        # Load data from a file and separate research groups and topics.
    items = load_yaml(args.file)
    rgroups = items[u'research_groups'] if items and items.get(u'research_groups') else []
    topics = items[u'topics'] if items and items.get(u'research_groups') else []

    # Create users, research groups and topics.
    create_research_groups_and_users(act, rgroups)
    create_topics(act, topics)


def fail_safe_check(act, func, label, max_count=0):
    message_end = u'Data bootstraping works only on an empty database or if "--force" flag is used.'
    cnt = len(func(all_fields=False))
    if cnt > max_count:
        raise ValidationError(u'Fail-safe: Found {} existing {}. {}'.format(cnt, label, message_end))


def get_host_url(external_url_first=True):
    """Determines CKAN URL."""
    if args.ckan_url:
        host_url = args.ckan_url
    elif external_url_first and u'CKAN_SITE_URL' in os.environ:
        host_url = os.environ[u'CKAN_SITE_URL']
    else:
        host_url = u'http://localhost:5000' #.format(socket.gethostname())

    return host_url


def load_yaml(file_path):
    with open(file_path, u'r') as stream:
        items = None
        try:
            items = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            print exc.message

    return items


def create_research_groups_and_users(act, rgroups):
    u"""Iterate over research groups (RG), create each RG add listed member users."""
    for name, info in rgroups.items():
        members = []

        # Create the admin user
        if info and info.get(u'admin'):
            admin = create_single_user(act, info[u'admin'], members)

        # Create listed member users
        if info and info.get(u'members'):
            members_raw = [u.strip() for u in info[u'members'].split(u';')]
            members_raw = list(set(members_raw))
            for member_raw in members_raw:
                create_single_user(act, member_raw, members)

        # Create the research group adding listed users as members.
        title = info[u'title'] if info and info.get(u'title') else name
        description = info[u'description'] if info and info.get(u'description') else u''
        api_create_research_group(act, name, title, description, admin, members)


def create_single_user(act, user_raw, all_members):
    u"""Create a user calling API and if successful return user name."""
    username, full_name, email = parse_user(user_raw)
    member = api_create_user(act, username, full_name, email, args.password)
    if member:
        assert member == username
        all_members.append(member)

    return username


def parse_user(outlook_paste):
    u"""Parse user info from the user string (generated by copy-pasting from Outlook)."""
    full_name, email_raw = outlook_paste.split(u' <')
    email = email_raw.strip(punctuation)
    username = email.split(u'@')[0].lower()

    return username, full_name, email


def api_create_user(act, username, full_name, email, password):
    u"""Create a user by calling API via the common method."""
    args_dict = {u'name': username, u'email': email, u'fullname': full_name, u'password': password}

    created_msg = u'User already exists: {}'.format(username)
    exists_msg = u'Created a new user {}'.format(username)
    error_msg = u'name is not available'

    new_user = _call_api(act.user_create, args_dict, created_msg, exists_msg, error_msg)

    name = new_user[u'name'] if new_user and new_user.get(u'name') else None

    return name


def api_create_research_group(act, name, title, description, admin, members):
    u"""Create a research group by calling API via the common method."""
    host_url = get_host_url()
    image_url = u'{}/images/rgroup-{}.png'.format(host_url, name)

    # Research Group (organization) roles: member - see all datasets, editor - edit datasets, admin - manage info
    users = [{u'name': username, u'capacity': u'editor'} for username in members if username != admin]
    users.append({u'name': admin, u'capacity': u'admin'})

    args_dict = {u'name': name, u'title': title, u'description': description, u'image_url': image_url, u'users': users}
    created_msg = u'Research Group already exists: {}'.format(title)
    exists_msg = u'Created a new research group {}'.format(title)
    error_msg = u'name already exists'

    _call_api(act.organization_create, args_dict, created_msg, exists_msg, error_msg)


def create_topics(act, topics):
    u"""Iterate over topics and create them."""
    for name, info in topics.items():
        title = info[u'title'] if info and info.get(u'title') else name
        description = info[u'description'] if info and info.get(u'description') else u''
        admin = info[u'admin']
        api_create_topic(act, name, title, description, admin)


def api_create_topic(act, name, title, description, admin):
    u"""Create a topic by calling API via the common method."""
    host_url = get_host_url()
    image_url = u'{}/images/topic-{}.png'.format(host_url, name)
    # Make all research group admins as topic admins.
    admin_users = [{u'name': admin, u'capacity': u'admin'}]

    # Topics (group) roles: admin - manage info, member - add data to the topic (all can see the groups and datasets)
    # TODO: Ensure all users can add datasets to topics. determine which users will be topic admins.
    args_dict = {u'name': name, u'title': title, u'description': description, u'image_url': image_url, u'users': admin_users}

    created_msg = u'Topic already exists: {}'.format(title)
    exists_msg = u'Created a new topic {}'.format(title)
    error_msg = u'name already exists'

    _call_api(act.group_create, args_dict, created_msg, exists_msg, error_msg)


def _call_api(func, args_dict, created_msg, exists_msg, err_msg):
    u"""The common API call method handling exceptions used to detect existing data."""
    ok = True
    ret = None
    if args and hasattr(args, u'dryrun') and not args.dryrun:
        try:
            ret = func(**args_dict)
        except ValidationError as e:
            if e.error_dict and e.error_dict.get(u'name') and err_msg in e.error_dict[u'name'][0]:
                print created_msg
                ok = False
            else:
                raise e
        except NotAuthorized as e:
            ok = False
            print u"NotAuthorized: Make sure api key is valid and the user is a sysadmin."
            sys.exit(1)

    if ok:
        print exists_msg

    return ret

def parse_args():
    example = ur"python bootstrap.py 2f83d65d-e5e9-4e22-9c52-baaf898c2022"
    parser = argparse.ArgumentParser(example)
    parser.add_argument(u'api_key')
    parser.add_argument(u'-f', u'--file', default=u'metadata.yaml')
    parser.add_argument(u'-p', u'--password', default=u'Password123')
    parser.add_argument(u'--url', dest='ckan_url', default=None)
    parser.add_argument(u'--dryrun', action=u'store_true')
    parser.add_argument(u'--force', action=u'store_true')
    return parser.parse_args()


if __name__ == u"__main__":
    args = parse_args()
    main(args)


